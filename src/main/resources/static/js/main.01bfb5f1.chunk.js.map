{"version":3,"sources":["api/AgensGraphApi.ts","config/cytoscape_layout.ts","config/cytoscape_config.ts","components/modal/CreateNodeModal.tsx","components/modal/CreateEdgeModal.tsx","components/chart/Cytoscape.tsx","layout/Chart.tsx","components/footbar/Schemes.tsx","layout/Footbar.tsx","layout/Sidebar.tsx","interfaces/sidebarInterface.ts","App.tsx","index.tsx","layout/scss/sidebar.module.scss","App.module.scss","components/footbar/schemes.module.scss"],"names":["AgensGraphApi","createNode","data","a","axios","post","response","returnData","status","String","errorCode","errorMsg","createEdge","readNode","get","readEdge","removeNode","graphId","delete","removeEdge","updateNode","put","updateEdge","initLocation","style","selector","label","width","height","opacity","layout","default","coseLayout","name","idealEdgeLength","refresh","nodeDimensionsIncludeLabels","fit","randomize","padding","nodeRepulsion","stop","event","cy","nodes","forEach","ele","id","x","position","y","CreateNodeModal","scheme","visible","closeModal","useState","propertyKeys","setKeys","propertyValues","setValues","modalVisible","setVisble","useEffect","undefined","Object","keys","map","onOk","properties","key","index","_cytoNode","v1","schemeId","onCancel","property","type","onChange","e","indexOf","values","JSON","parse","stringify","splice","currentTarget","value","inputhandler","porpertyInputs","CreateEdgeModal","edge","setLabel","propertyTypes","setTypes","source","target","types","labelInputHandler","idx","keyInputHandler","valueInputHandler","typeInputHandler","onClick","addProperty","removeProperty","cytoscape","use","edgehandles","Cytoscape","schemes","dataSetProps","pushDataToApp","pushSelectedToApp","setSidebar","config","graphLayout","schemesList","setSchemes","modalScheme","setModalScheme","modalEdge","setModalEdge","nodeModalVisible","setVisibleNodeModal","edgeModalVisible","setVisibleEdgeModal","dropPosition","setPosition","createCytoscape","addExtEdgeHnadles","addOnClickHandles","container","document","getElementById","elements","on","handleOnClick","defaults","preview","hoverDelay","handleNodes","snap","snapThreshold","snapFrequency","noEdgeEventsInDraw","disableBrowserGestures","handlePosition","node","complete","sourceNode","targetNord","handleDragEdge","vLabel","add","group","pan","storedCurrentDataSet","alert","eLabel","removeNodeAndEdge","result","remove","updateNodeAndEdge","porperties","_newData","push","pushInfo","elementType","toString","removeFunc","updateFunc","edgeTypes","showcreateNodeModal","filter","targetNode","onDragOver","preventDefault","stopPropagation","handleDragOver","onDrop","eventName","dataTransfer","getData","screenRect","getBoundingClientRect","clientX","left","clientY","top","handleDrop","Chart","setCurrentData","setSelected","setDataProps","ReadVertexAndEdge","instanceofNodeAndEdge","object","Array","from","length","newDataSet","vertex","v","start","end","Schemes","props","className","Style","schemeList","schm","labels","display","draggable","onDragStart","setData","handleDragStart","Footbar","Sidebar","sidebarAction","addLabelScheme","selectedElement","selectedValues","setMode","param","sidebarConfig","sidebrTabRender","tab","active","passive","home","information","info","buttons","title","okText","cancelText","onConfirm","properites","returnUpdateProperty","danger","infomationRender","create","primary","schemeSet","addScheme","select","visibility","sidebarInterface","initConfig","App","setSidebarConfig","app","chart","sidebar","newLables","footbar","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.01bfb5f1.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n  reqCreateNode,\r\n  reqCreateEdge,\r\n  reqRemoveNode,\r\n  reqRemoveEdge,\r\n  reqUpdateNode,\r\n  reqUpdateEdge,\r\n} from './requestInterface';\r\nimport {\r\n  repCreateNode,\r\n  repCreateEdge,\r\n  repReadNode,\r\n  repReadEdge,\r\n  repRemoveNode,\r\n  apiError,\r\n} from './responseInterface';\r\n\r\nconst createNode = async (\r\n  data: reqCreateNode,\r\n): Promise<repCreateNode | apiError> => {\r\n  const response = await axios.post('/api/create/vertex', data);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'create node fail' };\r\n  return returnData;\r\n};\r\n\r\nconst createEdge = async (\r\n  data: reqCreateEdge,\r\n): Promise<repCreateEdge | apiError> => {\r\n  const response = await axios.post('/api/create/edge', data);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'create edge fail' };\r\n  return returnData;\r\n};\r\n\r\nconst readNode = async (): Promise<repReadNode[] | apiError> => {\r\n  const response = await axios.get('/api/read/vertex/all');\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? response.data\r\n      : { errorCode: response.status, errorMsg: 'create node fail' };\r\n  return returnData;\r\n};\r\n\r\nconst readEdge = async (): Promise<repReadEdge[] | apiError> => {\r\n  const response = await axios.get('/api/read/edge/all');\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? response.data\r\n      : { errorCode: response.status, errorMsg: 'create node fail' };\r\n  return returnData;\r\n};\r\n\r\nconst removeNode = async (\r\n  graphId: reqRemoveNode,\r\n): Promise<repRemoveNode | apiError> => {\r\n  const response = await axios.delete(`/api/delete/vertex/${graphId}`);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'remove node fail' };\r\n  return returnData;\r\n};\r\n\r\nconst removeEdge = async (\r\n  graphId: reqRemoveEdge,\r\n): Promise<repRemoveNode | apiError> => {\r\n  const response = await axios.delete(`/api/delete/edge/${graphId}`);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'remove edge fail' };\r\n  return returnData;\r\n};\r\n\r\nconst updateNode = async (\r\n  graphId: string,\r\n  data: reqUpdateNode,\r\n): Promise<repRemoveNode | apiError> => {\r\n  const response = await axios.put(`/api/update/vertex/${graphId}`, data);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'update node fail' };\r\n  return returnData;\r\n};\r\n\r\nconst updateEdge = async (\r\n  graphId: string,\r\n  data: reqUpdateEdge,\r\n): Promise<repRemoveNode | apiError> => {\r\n  const response = await axios.put(`/api/update/edge/${graphId}`, data);\r\n\r\n  const returnData =\r\n    response.status === 200 && response.data !== ''\r\n      ? String(response.data)\r\n      : { errorCode: response.status, errorMsg: 'update edge fail' };\r\n  return returnData;\r\n};\r\n\r\nconst AgensGraphApi = {\r\n  createNode,\r\n  createEdge,\r\n  readNode,\r\n  readEdge,\r\n  removeNode,\r\n  removeEdge,\r\n  updateNode,\r\n  updateEdge,\r\n};\r\n\r\nexport default AgensGraphApi;\r\n","export const initLocation: any = {};\r\nconst coseLayout = {\r\n  name: 'cose',\r\n  idealEdgeLength: 100,\r\n  refresh: 300,\r\n  nodeDimensionsIncludeLabels: true,\r\n  fit: false,\r\n  randomize: true,\r\n  padding: 10,\r\n  nodeRepulsion: 9500,\r\n  stop: (event: any) => {\r\n    event.cy.nodes().forEach(function (ele: any) {\r\n      initLocation[ele.id()] = { x: ele.position().x, y: ele.position().y };\r\n    });\r\n  },\r\n};\r\n\r\nconst layout = {\r\n  coseLayout,\r\n};\r\n\r\nexport default layout;\r\n","import layout from './cytoscape_layout';\r\nexport default {\r\n  style: [\r\n    // the stylesheet for the graph\r\n    {\r\n      selector: 'node',\r\n      style: {\r\n        'background-color': '#666',\r\n        label: 'data(label)',\r\n        width: 30,\r\n        height: 30,\r\n      },\r\n    },\r\n    {\r\n      selector: 'edge',\r\n      style: {\r\n        width: 2,\r\n        'target-arrow-shape': 'triangle',\r\n        'line-color': '#9A9B9F',\r\n        'target-arrow-color': '#9A9B9F',\r\n        'curve-style': 'bezier',\r\n        opacity: 1,\r\n      },\r\n    },\r\n    {\r\n      selector: '.eh-handle',\r\n      style: {\r\n        'background-color': 'red',\r\n        width: 12,\r\n        height: 12,\r\n      },\r\n    },\r\n    {\r\n      selector: '.eh-source',\r\n      style: {\r\n        'border-width': 5,\r\n        'border-color': '#065FD4',\r\n      },\r\n    },\r\n    {\r\n      selector: '.eh-target',\r\n      style: {\r\n        'background-color': '#065FD4',\r\n      },\r\n    },\r\n    {\r\n      selector: '.eh-ghost-edge',\r\n      style: {\r\n        width: 2,\r\n        'target-arrow-shape': 'triangle',\r\n        'line-color': '#065FD4',\r\n        'target-arrow-color': '#065FD4',\r\n        'curve-style': 'bezier',\r\n        opacity: 1,\r\n      },\r\n    },\r\n  ],\r\n  layout: {\r\n    default: layout.coseLayout,\r\n  },\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { Modal } from 'antd';\r\n\r\nimport { schemeInterface } from '../../interfaces/schemeInterface';\r\nimport { cytoNode } from '../../interfaces/cyctocapeInterface';\r\n\r\ninterface props {\r\n  scheme: schemeInterface;\r\n  visible: boolean;\r\n  closeModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n  createNode: (data: cytoNode) => void;\r\n}\r\n\r\nconst CreateNodeModal: React.FunctionComponent<props> = ({\r\n  scheme,\r\n  visible,\r\n  closeModal,\r\n  createNode,\r\n}: props) => {\r\n  // useState\r\n  const [propertyKeys, setKeys] = useState(['']);\r\n  const [propertyValues, setValues] = useState(['']);\r\n  const [modalVisible, setVisble] = useState(false);\r\n\r\n  //useEffect\r\n  useEffect(() => {\r\n    setVisble(visible);\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (scheme.scheme !== null && scheme.scheme !== undefined) {\r\n      const propertyKeys = Object.keys(scheme.scheme);\r\n      setKeys(propertyKeys);\r\n      setValues(propertyKeys.map(() => ''));\r\n    }\r\n    if (visible === false) {\r\n      setKeys(['']);\r\n      setValues(['']);\r\n    }\r\n  }, [modalVisible]);\r\n\r\n  //inputhandler\r\n  const inputhandler = (e: React.FormEvent<HTMLInputElement>, key: string) => {\r\n    const index = propertyKeys.indexOf(key);\r\n    const values = JSON.parse(JSON.stringify(propertyValues));\r\n    values.splice(index, 1, e.currentTarget.value);\r\n    setValues(values);\r\n  };\r\n\r\n  //reder property inputs\r\n  const porpertyInputs = () => {\r\n    if (scheme.scheme !== null && scheme.scheme !== undefined) {\r\n      const propertyKeys = Object.keys(scheme.scheme);\r\n      const property = Object(scheme.scheme);\r\n      return propertyKeys.map((key: string, index) => (\r\n        <div key={`porpertyInputs${index}`}>\r\n          <p>\r\n            {key} :{' '}\r\n            <input\r\n              key={`${index}-${scheme.id}`}\r\n              type={property[key]}\r\n              onChange={(e) => inputhandler(e, key)}\r\n            />\r\n          </p>\r\n        </div>\r\n      ));\r\n    }\r\n  };\r\n  // Add Cytoscape Node\r\n  const onOk = () => {\r\n    let properties = {};\r\n    propertyKeys.forEach((key, index) => {\r\n      properties = {\r\n        ...properties,\r\n        [key]: propertyValues[index],\r\n      };\r\n    });\r\n    const _cytoNode: cytoNode = {\r\n      data: {\r\n        id: v1(),\r\n        label: scheme.label,\r\n        properties: properties,\r\n        schemeId: scheme.id,\r\n      },\r\n    };\r\n    createNode(_cytoNode);\r\n    closeModal(false);\r\n  };\r\n  // Close modal\r\n  const onCancel = () => {\r\n    closeModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal visible={modalVisible} onOk={onOk} onCancel={onCancel}>\r\n        <label>lable</label> : <span>{scheme.label}</span>\r\n        <hr />\r\n        <div>{porpertyInputs()}</div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNodeModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nimport { cytoEdge } from '../../interfaces/cyctocapeInterface';\r\n\r\ninterface props {\r\n  edge: { source: string; target: string };\r\n  visible: boolean;\r\n  closeModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n  createEdge: (data: cytoEdge) => void;\r\n}\r\n\r\nconst CreateEdgeModal: React.FunctionComponent<props> = ({\r\n  edge,\r\n  visible,\r\n  closeModal,\r\n  createEdge,\r\n}: props) => {\r\n  // useState\r\n  const [label, setLabel] = useState('');\r\n  const [propertyKeys, setKeys] = useState(['']);\r\n  const [propertyValues, setValues] = useState(['']);\r\n  const [propertyTypes, setTypes] = useState(['text']);\r\n  const [modalVisible, setVisble] = useState(false);\r\n\r\n  //useEffect\r\n  useEffect(() => {\r\n    setVisble(visible);\r\n  });\r\n\r\n  // create Edge\r\n  const onOk = () => {\r\n    let properties = {};\r\n    propertyKeys.forEach((key, index) => {\r\n      properties = { ...properties, [key]: propertyValues[index] };\r\n    });\r\n    createEdge({\r\n      data: {\r\n        id: '',\r\n        label: label,\r\n        source: edge.source,\r\n        target: edge.target,\r\n        properties: properties,\r\n        types: propertyTypes,\r\n      },\r\n    });\r\n    closeModal(false);\r\n  };\r\n\r\n  // Close modal\r\n  const onCancel = () => {\r\n    closeModal(false);\r\n  };\r\n\r\n  // handler\r\n  const labelInputHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    const label = event.currentTarget.value;\r\n    setLabel(label);\r\n  };\r\n  const keyInputHandler = (\r\n    event: React.FormEvent<HTMLInputElement>,\r\n    idx: number,\r\n  ) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const key = event.currentTarget.value;\r\n    keys.splice(idx, 1, key);\r\n    setKeys(keys);\r\n  };\r\n  const valueInputHandler = (\r\n    event: React.FormEvent<HTMLInputElement>,\r\n    idx: number,\r\n  ) => {\r\n    const values = JSON.parse(JSON.stringify(propertyValues));\r\n    const value = event.currentTarget.value;\r\n    values.splice(idx, 1, value);\r\n    setValues(values);\r\n  };\r\n  const typeInputHandler = (\r\n    event: React.FormEvent<HTMLSelectElement>,\r\n    idx: number,\r\n  ) => {\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    const type = event.currentTarget.value;\r\n    types.splice(idx, 1, type);\r\n    setTypes(types);\r\n  };\r\n\r\n  // add & remove property\r\n  const addProperty = (idx: number) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const values = JSON.parse(JSON.stringify(propertyValues));\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    keys.splice(idx + 1, 0, '');\r\n    values.splice(idx + 1, 0, '');\r\n    types.splice(idx + 1, 0, 'text');\r\n    setKeys(keys);\r\n    setValues(values);\r\n    setTypes(types);\r\n  };\r\n  const removeProperty = (idx: number) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const values = JSON.parse(JSON.stringify(propertyValues));\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    keys.splice(idx, 1);\r\n    values.splice(idx, 1);\r\n    types.splice(idx, 1);\r\n    setKeys(keys);\r\n    setValues(values);\r\n    setTypes(types);\r\n  };\r\n\r\n  const inputRender = () => {\r\n    return propertyKeys.map((key, index) => (\r\n      <div key={`edgeproperty-input${index}`}>\r\n        <input\r\n          key={`edgeproperty-input-key${index}`}\r\n          type=\"text\"\r\n          onChange={(event) => keyInputHandler(event, index)}\r\n          value={propertyKeys[index]}\r\n        />{' '}\r\n        <input\r\n          key={`edgeproperty-input-value${index}`}\r\n          type={propertyTypes[index]}\r\n          onChange={(event) => valueInputHandler(event, index)}\r\n          value={propertyValues[index]}\r\n        />{' '}\r\n        <select\r\n          key={`edgeproperty-input-type${index}`}\r\n          onChange={(event) => typeInputHandler(event, index)}\r\n          value={propertyTypes[index]}\r\n        >\r\n          <option value=\"text\">text</option>\r\n          <option value=\"number\">number</option>\r\n          <option value=\"date\">date</option>\r\n        </select>{' '}\r\n        <button\r\n          key={`edgeproperty-btnp${index}`}\r\n          onClick={() => addProperty(index)}\r\n        >\r\n          +\r\n        </button>\r\n        {index > 0 ? (\r\n          <button\r\n            key={`edgeproperty-btnm${index}`}\r\n            onClick={() => removeProperty(index)}\r\n          >\r\n            -\r\n          </button>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal visible={modalVisible} onOk={onOk} onCancel={onCancel}>\r\n        <label>lable</label> :{' '}\r\n        <input\r\n          type=\"text\"\r\n          value={label}\r\n          onChange={(event) => labelInputHandler(event)}\r\n        />\r\n        {' * label is required value'}\r\n        <hr />\r\n        <div>{inputRender()}</div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateEdgeModal;\r\n","// package\r\nimport React, { useState, useEffect } from 'react';\r\nimport cytoscape, { EdgeCollection } from 'cytoscape';\r\nimport edgehandles from 'cytoscape-edgehandles';\r\nimport AgensGraphApi from '../../api/AgensGraphApi';\r\n//config\r\nimport config from '../../config/cytoscape_config';\r\n//css\r\nimport './cytoscape.css';\r\n// interface\r\nimport { sidebarConfig } from '../../interfaces/sidebarInterface';\r\nimport { schemeInterface } from '../../interfaces/schemeInterface';\r\nimport {\r\n  cytoDataSet,\r\n  cytoNode,\r\n  cytoEdge,\r\n  cytoInfomation,\r\n} from '../../interfaces/cyctocapeInterface';\r\n// components\r\nimport CreateNodeModal from '../modal/CreateNodeModal';\r\nimport CreateEdgeModal from '../modal/CreateEdgeModal';\r\n\r\ninterface props {\r\n  schemes: schemeInterface[];\r\n  dataSetProps: cytoDataSet[] | [];\r\n  pushDataToApp: React.Dispatch<React.SetStateAction<cytoDataSet[]>>;\r\n  pushSelectedToApp: React.Dispatch<\r\n    React.SetStateAction<cytoInfomation | undefined>\r\n  >;\r\n  setSidebar: React.Dispatch<React.SetStateAction<sidebarConfig>>;\r\n}\r\n\r\nlet cy = cytoscape();\r\ncytoscape.use(edgehandles);\r\n\r\nconst Cytoscape: React.FunctionComponent<props> = ({\r\n  schemes,\r\n  dataSetProps,\r\n  pushDataToApp,\r\n  pushSelectedToApp,\r\n  setSidebar,\r\n}: props) => {\r\n  // useState\r\n  const [graphLayout, setLayout] = useState(config.layout.default);\r\n  const [style, setStyle] = useState(config.style);\r\n  const [schemesList, setSchemes] = useState([{ id: '', label: '' }]);\r\n  const [modalScheme, setModalScheme] = useState({ id: '', label: '' });\r\n  const [modalEdge, setModalEdge] = useState({ source: '', target: '' });\r\n  const [nodeModalVisible, setVisibleNodeModal] = useState(false);\r\n  const [edgeModalVisible, setVisibleEdgeModal] = useState(false);\r\n  const [dropPosition, setPosition] = useState({\r\n    x: 120,\r\n    y: 120,\r\n  });\r\n\r\n  // useEffect\r\n  useEffect(() => {\r\n    setSchemes(schemes);\r\n  }, [schemes]);\r\n\r\n  useEffect(() => {\r\n    cy = createCytoscape();\r\n    addExtEdgeHnadles(cy);\r\n    addOnClickHandles(cy);\r\n  }, [graphLayout, dataSetProps]);\r\n\r\n  // init: createCytoscape\r\n  const createCytoscape = () => {\r\n    return cytoscape({\r\n      container: document.getElementById('cy'), // container to render in\r\n      elements: dataSetProps,\r\n      style: style,\r\n      layout: graphLayout,\r\n    });\r\n  };\r\n  // init: click event\r\n  const addOnClickHandles = (cy: cytoscape.Core) => {\r\n    cy.on('click', 'node', (event) =>\r\n      handleOnClick(event as cytoscape.EventObject),\r\n    );\r\n    cy.on('click', 'edge', (event) =>\r\n      handleOnClick(event as cytoscape.EventObject),\r\n    );\r\n  };\r\n  // init: extension edgehandels\r\n  const addExtEdgeHnadles = (cy: cytoscape.Core) => {\r\n    const defaults = {\r\n      preview: true, // whether to show added edges preview before releasing selection\r\n      hoverDelay: 150, // time spent hovering over a target node before it is considered selected\r\n      handleNodes: 'node', // selector/filter function for whether edges can be made from a given node\r\n      snap: false, // when enabled, the edge can be drawn by just moving close to a target node\r\n      snapThreshold: 50, // the target node must be less than or equal to this many pixels away from the cursor/finger\r\n      snapFrequency: 15, // the number of times per second (Hz) that snap checks done (lower is less expensive)\r\n      noEdgeEventsInDraw: false, // set events:no to edges during draws, prevents mouseouts on compounds\r\n      disableBrowserGestures: true, // during an edge drawing gesture, disable browser gestures such as two-finger trackpad swipe and pinch-to-zoom\r\n      handlePosition: (node: any) => {\r\n        return 'middle bottom'; // sets the position of the handle in the format of \"X-AXIS Y-AXIS\" such as \"left top\", \"middle top\"\r\n      },\r\n      complete: (\r\n        sourceNode: cytoscape.NodeSingular,\r\n        targetNord: cytoscape.NodeSingular,\r\n        edge: EdgeCollection,\r\n      ) => handleDragEdge(sourceNode, targetNord, edge),\r\n    };\r\n    cy.edgehandles(defaults);\r\n  };\r\n\r\n  // feature:Add Node\r\n  const createNode = async (node: cytoNode) => {\r\n    const graphId = await AgensGraphApi.createNode({\r\n      vLabel: node.data.label,\r\n      properties: node.data.properties,\r\n    });\r\n    if (typeof graphId === 'string') {\r\n      node.data.id = graphId;\r\n      cy.add({\r\n        group: 'nodes',\r\n        ...node,\r\n        position: {\r\n          x: dropPosition.x - cy.pan().x,\r\n          y: dropPosition.y - cy.pan().y,\r\n        },\r\n      });\r\n      storedCurrentDataSet();\r\n    } else {\r\n      alert(graphId.errorMsg);\r\n    }\r\n  };\r\n\r\n  // feature:Create Edge eh-handle event\r\n  const createEdge = async (edge: cytoEdge) => {\r\n    const graphId = await AgensGraphApi.createEdge({\r\n      source: edge.data.source,\r\n      target: edge.data.target,\r\n      eLabel: edge.data.label,\r\n      properties: edge.data.properties || {},\r\n    });\r\n    if (typeof graphId === 'string') {\r\n      edge.data.id = graphId;\r\n      cy.add({\r\n        group: 'edges',\r\n        ...edge,\r\n      });\r\n    } else {\r\n      alert(graphId.errorMsg);\r\n    }\r\n    storedCurrentDataSet();\r\n  };\r\n\r\n  // feature: Remove Node & Edge\r\n  const removeNodeAndEdge = async (target: any) => {\r\n    const result =\r\n      target.group() === 'nodes'\r\n        ? await AgensGraphApi.removeNode(target.data().id)\r\n        : await AgensGraphApi.removeEdge(target.data().id);\r\n    if (typeof result === 'string') {\r\n      cy.remove(target);\r\n      storedCurrentDataSet();\r\n    } else {\r\n      alert(result.errorMsg);\r\n    }\r\n  };\r\n\r\n  // feature: Update Node & Edge\r\n  const updateNodeAndEdge = async (target: any, porperties: any) => {\r\n    const data = {\r\n      properties: porperties,\r\n    };\r\n    const result =\r\n      target.group() === 'nodes'\r\n        ? await AgensGraphApi.updateNode(target.data().id, data)\r\n        : await AgensGraphApi.updateEdge(target.data().id, data);\r\n\r\n    if (typeof result === 'string') {\r\n      target.data().properties = porperties;\r\n      storedCurrentDataSet();\r\n    } else {\r\n      alert(result.errorMsg);\r\n    }\r\n  };\r\n\r\n  // feature: stored data to App\r\n  const storedCurrentDataSet = () => {\r\n    const _newData: cytoDataSet[] = [];\r\n    cy.elements().forEach((e) => {\r\n      _newData.push({ data: e.data() });\r\n    });\r\n    pushDataToApp(_newData);\r\n  };\r\n\r\n  //feature: onClick element\r\n  const handleOnClick = (event: cytoscape.EventObject) => {\r\n    const target = event.target;\r\n    setSidebar({\r\n      status: 'home',\r\n      visible: true,\r\n    });\r\n    const pushInfo: cytoInfomation = {\r\n      elementType: target.group().toString(),\r\n      id: target.data().id,\r\n      schemeId: target.data().schemeId,\r\n      label: target.data().label,\r\n      properties: target.data().properties,\r\n      removeFunc: () => removeNodeAndEdge(target),\r\n      updateFunc: (properties: any) => updateNodeAndEdge(target, properties),\r\n    };\r\n    pushInfo.elementType === 'nodes'\r\n      ? pushSelectedToApp(pushInfo)\r\n      : pushInfo.elementType === 'edges'\r\n      ? pushSelectedToApp({ ...pushInfo, edgeTypes: target.data().types })\r\n      : false;\r\n  };\r\n\r\n  //feature: label dorp -> create node\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n  const handleDrop = (e: React.DragEvent, eventName: string) => {\r\n    if (eventName !== 'createNode') return false;\r\n    const schemeId = e.dataTransfer.getData('schemeId');\r\n    const screenRect = e.currentTarget.getBoundingClientRect();\r\n    setPosition({\r\n      x: e.clientX - screenRect.left,\r\n      y: e.clientY - screenRect.top,\r\n    });\r\n    showcreateNodeModal(schemeId);\r\n  };\r\n  const showcreateNodeModal = (schemeId: string) => {\r\n    const modalScheme = schemesList.filter((scheme) => scheme.id === schemeId);\r\n    setModalScheme(modalScheme[0]);\r\n    setVisibleNodeModal(true);\r\n  };\r\n\r\n  // feature: drag edge -> create edge\r\n  const handleDragEdge = (\r\n    sourceNode: cytoscape.NodeSingular,\r\n    targetNode: cytoscape.NodeSingular,\r\n    edge: EdgeCollection,\r\n  ) => {\r\n    setVisibleEdgeModal(true);\r\n    setModalEdge({\r\n      source: sourceNode.data().id,\r\n      target: targetNode.data().id,\r\n    });\r\n    cy.remove(edge);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100%' }}>\r\n      <div\r\n        id=\"cy\"\r\n        onDragOver={(e) => handleDragOver(e)}\r\n        onDrop={(e) => handleDrop(e, 'createNode')}\r\n      />\r\n      <CreateNodeModal\r\n        scheme={modalScheme}\r\n        visible={nodeModalVisible}\r\n        closeModal={setVisibleNodeModal}\r\n        createNode={createNode}\r\n      />\r\n      <CreateEdgeModal\r\n        edge={modalEdge}\r\n        visible={edgeModalVisible}\r\n        closeModal={setVisibleEdgeModal}\r\n        createEdge={createEdge}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cytoscape;\r\n","// package\r\nimport React, { useEffect, useState } from 'react';\r\nimport Cytoscape from '../components/chart/Cytoscape';\r\n// interfaces\r\nimport { sidebarConfig } from '../interfaces/sidebarInterface';\r\nimport { schemeInterface } from '../interfaces/schemeInterface';\r\nimport { cytoDataSet, cytoInfomation } from '../interfaces/cyctocapeInterface';\r\nimport { repReadEdge, repReadNode } from '../api/responseInterface';\r\nimport AgensGraphApi from '../api/AgensGraphApi';\r\n\r\ninterface props {\r\n  schemes: schemeInterface[];\r\n  setCurrentData: React.Dispatch<React.SetStateAction<cytoDataSet[]>>;\r\n  setSelected: React.Dispatch<React.SetStateAction<cytoInfomation | undefined>>;\r\n  setSidebar: React.Dispatch<React.SetStateAction<sidebarConfig>>;\r\n}\r\n\r\nconst Chart: React.FunctionComponent<props> = ({\r\n  schemes,\r\n  setCurrentData,\r\n  setSelected,\r\n  setSidebar,\r\n}: props) => {\r\n  const [dataSetProps, setDataProps] = useState<cytoDataSet[] | []>([]);\r\n\r\n  useEffect(() => {\r\n    ReadVertexAndEdge();\r\n  }, []);\r\n\r\n  // feature: Read Vertex AND Edge\r\n  const ReadVertexAndEdge = async () => {\r\n    const instanceofNodeAndEdge = (\r\n      object: any,\r\n    ): object is repReadNode[] | repReadEdge[] => {\r\n      if (Array.from(object).length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n    const newDataSet: cytoDataSet[] = [];\r\n    const vertex = await AgensGraphApi.readNode();\r\n    const edge = await AgensGraphApi.readEdge();\r\n    if (instanceofNodeAndEdge(vertex)) {\r\n      vertex.forEach((v: repReadNode) => {\r\n        const node = {\r\n          data: {\r\n            id: v.id,\r\n            label: v.vLabel,\r\n            properties: v.properties,\r\n          },\r\n        };\r\n        newDataSet.push(node);\r\n      });\r\n    }\r\n    if (instanceofNodeAndEdge(edge)) {\r\n      edge.forEach((v: repReadEdge) => {\r\n        const edge = {\r\n          data: {\r\n            id: v.id,\r\n            label: v.vLabel,\r\n            source: v.start,\r\n            target: v.end,\r\n            properties: v.properties,\r\n          },\r\n        };\r\n        newDataSet.push(edge);\r\n      });\r\n    }\r\n    setDataProps(newDataSet);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Cytoscape\r\n        schemes={schemes}\r\n        dataSetProps={dataSetProps}\r\n        pushDataToApp={setCurrentData}\r\n        pushSelectedToApp={setSelected}\r\n        setSidebar={setSidebar}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","/* eslint-disable react/prop-types */\r\n// package\r\nimport React from 'react';\r\n// css\r\nimport Style from './schemes.module.scss';\r\n// interface\r\nimport { schemeInterface } from '../../interfaces/schemeInterface';\r\n\r\ninterface props {\r\n  schemes: schemeInterface[];\r\n}\r\n\r\nconst handleDragStart = (\r\n  e: React.DragEvent<HTMLDivElement>,\r\n  schm: schemeInterface,\r\n) => {\r\n  e.dataTransfer.setData('schemeId', schm.id);\r\n};\r\n\r\nconst Schemes: React.FunctionComponent<props> = ({ ...props }) => {\r\n  return (\r\n    <div className={Style.schemeList}>\r\n      {props.schemes.map((schm) => (\r\n        <div\r\n          key={schm.id}\r\n          className={Style.labels}\r\n          style={schm.id === '' ? { display: 'none' } : {}}\r\n          draggable\r\n          onDragStart={(e) => handleDragStart(e, schm)}\r\n        >\r\n          {schm.label}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Schemes;\r\n","// package\r\nimport React from 'react';\r\nimport Schemes from '../components/footbar/Schemes';\r\n// interfaces\r\nimport { schemeInterface } from '../interfaces/schemeInterface';\r\n\r\ninterface props {\r\n  schemes: schemeInterface[];\r\n}\r\n\r\nconst Footbar: React.FunctionComponent<props> = ({ schemes }: props) => {\r\n  return (\r\n    <>\r\n      <Schemes schemes={schemes} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footbar;\r\n","// package\r\nimport React, { useState, useEffect } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { Popconfirm, Button, Input, Select } from 'antd';\r\n// interfaces\r\nimport { cytoInfomation } from '../interfaces/cyctocapeInterface';\r\nimport { sidebarConfig } from '../interfaces/sidebarInterface';\r\nimport { schemeInterface } from '../interfaces/schemeInterface';\r\n// scss\r\nimport style from './scss/sidebar.module.scss';\r\n\r\ninterface props {\r\n  schemes: schemeInterface[];\r\n  sidebarAction: (config: sidebarConfig) => void;\r\n  addLabelScheme: (label: schemeInterface) => void;\r\n  config: sidebarConfig;\r\n  selectedElement?: cytoInfomation | undefined;\r\n}\r\n\r\nconst Sidebar: React.FunctionComponent<props> = ({\r\n  schemes,\r\n  sidebarAction,\r\n  addLabelScheme,\r\n  config,\r\n  selectedElement,\r\n}: props) => {\r\n  // useState\r\n  const [label, setLabel] = useState('');\r\n  const [selectedValues, setValues] = useState(['']);\r\n  const [propertyKeys, setKeys] = useState(['']);\r\n  const [propertyTypes, setTypes] = useState(['text']);\r\n\r\n  //useEffect\r\n  useEffect(() => {\r\n    if (selectedElement?.properties) {\r\n      const values = Object.keys(selectedElement?.properties).map(\r\n        (key) => selectedElement?.properties[key],\r\n      );\r\n      setValues(values);\r\n    }\r\n  }, [selectedElement]);\r\n\r\n  // set Mode\r\n  const setMode = (param: string) => {\r\n    const sidebarConfig = {\r\n      ...config,\r\n      status: param,\r\n    };\r\n    sidebarAction(sidebarConfig);\r\n  };\r\n\r\n  // handler\r\n  const labelInputHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    const label = event.currentTarget.value;\r\n    setLabel(label);\r\n  };\r\n  const keyInputHandler = (\r\n    event: React.FormEvent<HTMLInputElement>,\r\n    idx: number,\r\n  ) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const key = event.currentTarget.value;\r\n    keys.splice(idx, 1, key);\r\n    setKeys(keys);\r\n  };\r\n  const typeInputHandler = (value: string, idx: number) => {\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    const type = value;\r\n    types.splice(idx, 1, type);\r\n    setTypes(types);\r\n  };\r\n  const valueInputHandler = (\r\n    event: React.FormEvent<HTMLInputElement>,\r\n    idx: number,\r\n  ) => {\r\n    const values = JSON.parse(JSON.stringify(selectedValues));\r\n    const value = event.currentTarget.value;\r\n    values.splice(idx, 1, value);\r\n    setValues(values);\r\n  };\r\n\r\n  // add & remove property\r\n  const addProperty = (idx: number) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    keys.splice(idx + 1, 0, '');\r\n    types.splice(idx + 1, 0, 'text');\r\n    setKeys(keys);\r\n    setTypes(types);\r\n  };\r\n  const removeProperty = (idx: number) => {\r\n    const keys = JSON.parse(JSON.stringify(propertyKeys));\r\n    const types = JSON.parse(JSON.stringify(propertyTypes));\r\n    keys.splice(idx, 1);\r\n    types.splice(idx, 1);\r\n    setKeys(keys);\r\n    setTypes(types);\r\n  };\r\n\r\n  // add label\r\n  const addScheme = () => {\r\n    let scheme = {};\r\n    propertyKeys.forEach((key, idx) => {\r\n      const type = propertyTypes[idx];\r\n      scheme = { ...scheme, [key]: type };\r\n    });\r\n    const schemeSet = {\r\n      id: v1(),\r\n      label: label,\r\n      scheme: scheme,\r\n    };\r\n    addLabelScheme(schemeSet);\r\n  };\r\n\r\n  // update property\r\n  const returnUpdateProperty = () => {\r\n    const properites: any = {};\r\n    Object.keys(selectedElement?.properties).forEach((key, index) => {\r\n      properites[key] = selectedValues[index];\r\n    });\r\n    return properites;\r\n  };\r\n\r\n  // render\r\n  const propertyInputs = () => {\r\n    return propertyKeys.map((key, index) => (\r\n      <div className={style.properties} key={`porpertyInputs${index}`}>\r\n        <label>key</label>\r\n        &nbsp;:&nbsp;\r\n        <Input\r\n          key={`createSchemem-key-${index}`}\r\n          type=\"text\"\r\n          value={key}\r\n          onChange={(event) => keyInputHandler(event, index)}\r\n        />\r\n        &nbsp;\r\n        <label>type</label>\r\n        &nbsp;:&nbsp;\r\n        <Select\r\n          className={style.select}\r\n          key={`createSchemem-type-${index}`}\r\n          value={propertyTypes[index]}\r\n          onChange={(value) => typeInputHandler(value, index)}\r\n        >\r\n          <option value=\"text\">text</option>\r\n          <option value=\"number\">number</option>\r\n          <option value=\"date\">date</option>\r\n        </Select>\r\n        &nbsp;\r\n        <Button\r\n          key={`createSchemem-btnp-${index}`}\r\n          onClick={() => addProperty(index)}\r\n        >\r\n          +\r\n        </Button>\r\n        &nbsp;\r\n        <Button\r\n          onClick={() => removeProperty(index)}\r\n          key={`createSchemem-btnm-${index}`}\r\n          style={index > 0 ? {} : { visibility: 'hidden' }}\r\n        >\r\n          -\r\n        </Button>\r\n        <br />\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  const infomationRender = () => {\r\n    const scheme = schemes.filter(\r\n      (scheme) => scheme.id === selectedElement?.schemeId,\r\n    )[0];\r\n    return (\r\n      <div className={style.information}>\r\n        <div className={style.info}>\r\n          <p>\r\n            {selectedElement?.elementType === 'nodes' ? (\r\n              <h2>node information</h2>\r\n            ) : selectedElement?.elementType === 'edges' ? (\r\n              <h2>edge information</h2>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </p>\r\n          <label>\r\n            <strong>lable name</strong>\r\n          </label>\r\n          {' : '}\r\n          <label>{selectedElement?.label || ''}</label>\r\n          <br />\r\n          <br />\r\n          <label>\r\n            <strong>Properties</strong>\r\n          </label>\r\n          <br />\r\n          {selectedElement?.elementType === 'nodes'\r\n            ? Object.keys(selectedElement?.properties).map((key, index) => (\r\n                <>\r\n                  <label className={style.key}>{`${key} :`}</label>\r\n                  <Input\r\n                    className={style.value}\r\n                    key={`info-property-${index}`}\r\n                    type={scheme ? scheme.scheme[key] : 'text'}\r\n                    value={selectedValues[index]}\r\n                    onChange={(event) => valueInputHandler(event, index)}\r\n                  />\r\n                  <br />\r\n                </>\r\n              ))\r\n            : Object.keys(selectedElement?.properties).map((key, index) => (\r\n                <>\r\n                  <label className={style.key}>{`${key} :`}</label>\r\n                  <Input\r\n                    className={style.value}\r\n                    key={`info-property-${index}`}\r\n                    type={\r\n                      selectedElement?.edgeTypes\r\n                        ? selectedElement?.edgeTypes[index]\r\n                        : 'text'\r\n                    }\r\n                    value={selectedValues[index]}\r\n                    onChange={(event) => valueInputHandler(event, index)}\r\n                  />\r\n                  <br />\r\n                </>\r\n              ))}\r\n        </div>\r\n        <div className={style.buttons}>\r\n          <Popconfirm\r\n            title=\"Are you sure to Update to Properties\"\r\n            okText=\"yes\"\r\n            cancelText=\"no\"\r\n            onConfirm={() =>\r\n              selectedElement?.updateFunc(returnUpdateProperty())\r\n            }\r\n          >\r\n            <Button>Update Properties</Button>\r\n          </Popconfirm>\r\n          <Popconfirm\r\n            title=\"Are you sure to delete this elements\"\r\n            okText=\"yes\"\r\n            cancelText=\"no\"\r\n            onConfirm={selectedElement?.removeFunc}\r\n          >\r\n            <Button type=\"primary\" danger>\r\n              Remove Element\r\n            </Button>\r\n          </Popconfirm>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const sidebrTabRender = (status: string) => {\r\n    return (\r\n      <>\r\n        <div className={style.tab}>\r\n          <button\r\n            className={status === 'home' ? style.active : style.passive}\r\n            onClick={() => setMode('home')}\r\n          >\r\n            home\r\n          </button>\r\n          <button\r\n            className={status === 'create' ? style.active : style.passive}\r\n            onClick={() => setMode('create')}\r\n          >\r\n            create scheme\r\n          </button>\r\n        </div>\r\n        <hr />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {config.status === 'home' ? (\r\n        <div className={style.home}>\r\n          {sidebrTabRender(config.status)}\r\n          {selectedElement?.properties ? infomationRender() : <></>}\r\n          {'  '}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {config.status === 'create' ? (\r\n        <div className={style.create}>\r\n          {sidebrTabRender(config.status)}\r\n          <div className={style.label}>\r\n            Label Name\r\n            <Input\r\n              id=\"nodeLabel\"\r\n              type=\"text\"\r\n              onChange={(event) => labelInputHandler(event)}\r\n            />\r\n            <Button\r\n              className={style.primary}\r\n              type=\"primary\"\r\n              onClick={() => addScheme()}\r\n            >\r\n              Add Label\r\n            </Button>\r\n          </div>\r\n          <hr />\r\n          {propertyInputs()}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","export interface sidebarConfig {\r\n  status: string;\r\n  visible: boolean;\r\n}\r\n\r\nconst sidebarInterface = {\r\n  initConfig: {\r\n    status: 'home',\r\n    visible: true,\r\n  },\r\n};\r\n\r\nexport default sidebarInterface;\r\n","import React, { useState } from 'react';\r\n// layout\r\nimport Chart from './layout/Chart';\r\nimport Footbar from './layout/Footbar';\r\nimport Sidebar from './layout/Sidebar';\r\n// scss\r\nimport Style from './App.module.scss';\r\n// interfaces\r\nimport sidebarInterface, { sidebarConfig } from './interfaces/sidebarInterface';\r\nimport { schemeInterface } from './interfaces/schemeInterface';\r\nimport { cytoDataSet, cytoInfomation } from './interfaces/cyctocapeInterface';\r\n\r\nconst App: React.FunctionComponent = () => {\r\n  const [sidebarConfig, setSidebarConfig] = useState<sidebarConfig>(\r\n    sidebarInterface.initConfig,\r\n  );\r\n  const [schemes, setSchemes] = useState<schemeInterface[]>([\r\n    { id: '', label: '' },\r\n  ]);\r\n  const [currentData, setCurrentData] = useState<cytoDataSet[]>([]);\r\n  const [selectedElement, setSelected] = useState<cytoInfomation>();\r\n\r\n  //feature: sidebar mode\r\n  const sidebarAction = (config: sidebarConfig) => {\r\n    setSidebarConfig(config);\r\n  };\r\n\r\n  //feature: addLabel\r\n  const addLabelScheme = (scheme: schemeInterface) => {\r\n    const newLables = [...schemes, scheme];\r\n    setSchemes(newLables);\r\n  };\r\n\r\n  return (\r\n    <div className={Style.app}>\r\n      <div className={Style.chart}>\r\n        <Chart\r\n          schemes={schemes}\r\n          setCurrentData={setCurrentData}\r\n          setSelected={setSelected}\r\n          setSidebar={setSidebarConfig}\r\n        />\r\n      </div>\r\n      <div className={Style.sidebar}>\r\n        <Sidebar\r\n          schemes={schemes}\r\n          sidebarAction={sidebarAction}\r\n          addLabelScheme={addLabelScheme}\r\n          config={sidebarConfig}\r\n          selectedElement={selectedElement}\r\n        />\r\n      </div>\r\n      <div className={Style.footbar}>\r\n        <Footbar schemes={schemes} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab\":\"sidebar_tab__3ady5\",\"active\":\"sidebar_active__jFNnh\",\"passive\":\"sidebar_passive__3_EYF\",\"home\":\"sidebar_home__3GF5E\",\"information\":\"sidebar_information__nReow\",\"info\":\"sidebar_info__coK-S\",\"key\":\"sidebar_key__3U9le\",\"value\":\"sidebar_value__2m7wo\",\"buttons\":\"sidebar_buttons__2T9it\",\"create\":\"sidebar_create__6etm8\",\"label\":\"sidebar_label__20JGn\",\"properties\":\"sidebar_properties__3C-bC\",\"primary\":\"sidebar_primary__2SPar\",\"select\":\"sidebar_select__2ys3v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3XNHb\",\"chart\":\"App_chart__2QmcC\",\"footbar\":\"App_footbar__224oL\",\"sidebar\":\"App_sidebar__2efMH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemeList\":\"schemes_schemeList__3a8-I\",\"labels\":\"schemes_labels__3DS_-\"};"],"sourceRoot":""}